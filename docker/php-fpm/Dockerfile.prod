# Production image for Easy!Appointments php-fpm
ARG PHP_VARIANT=8.2
FROM php:${PHP_VARIANT}-fpm AS build

WORKDIR /var/www/html

# Install system deps and PHP extensions (no xdebug)
RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends git zip unzip ca-certificates; \
    curl -fsSL https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions -o /usr/local/bin/install-php-extensions; \
    chmod +x /usr/local/bin/install-php-extensions; \
    install-php-extensions \
        gd intl ldap mbstring mysqli pdo pdo_mysql soap sockets xml zip exif sqlite3 gettext bcmath redis; \
    curl -fsSL https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer; \
    apt-get -y autoremove; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install PHP dependencies
COPY composer.json composer.lock ./
RUN composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader

# Build frontend assets
FROM node:18-alpine AS assets
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm ci
COPY gulpfile.js babel.config.json ./
COPY assets ./assets
# Only build assets (skip archive)
RUN npx gulp clean vendor scripts styles

# Final runtime
FROM php:${PHP_VARIANT}-fpm AS runtime
WORKDIR /var/www/html

# Install runtime PHP extensions (match build stage)
RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends ca-certificates; \
    curl -fsSL https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions -o /usr/local/bin/install-php-extensions; \
    chmod +x /usr/local/bin/install-php-extensions; \
    install-php-extensions \
        gd intl ldap mbstring mysqli pdo pdo_mysql soap sockets xml zip exif sqlite3 gettext bcmath redis; \
    apt-get -y autoremove; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy application code
COPY application ./application
COPY system ./system
COPY index.php patch.php config-sample.php ./
COPY storage ./storage

# Copy vendor from build stage
COPY --from=build /var/www/html/vendor ./vendor

# Copy built assets
COPY --from=assets /app/assets ./assets

# Ensure writable storage (adjust as needed for your orchestrator)
RUN chown -R www-data:www-data storage

EXPOSE 9000
CMD ["php-fpm"]
